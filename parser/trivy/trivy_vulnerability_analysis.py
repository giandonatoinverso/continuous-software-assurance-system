import json
import os
from collections import defaultdict
from statistics import mean


class TrivyVulnerabilityAnalysis:
    def __init__(self, report_path):
        self.report_path = report_path
        self.vulnerabilities = ""
        self.filter_criteria = None
        self.filtered_vulnerabilities = ""
        self.severity_levels = {
            "NONE": 0,
            "UNKNOWN": 1,
            "LOW": 2,
            "MEDIUM": 3,
            "HIGH": 4,
            "CRITICAL": 5
        }

    def group_vulnerabilities_by_id(self, target_name=None, severity_filter=None):
        grouped_vulnerabilities = defaultdict(lambda: {'Targets': set(), 'Details': None})
        for file_name in os.listdir(self.report_path):
            if file_name.endswith('.json'):
                file_path = os.path.join(self.report_path, file_name)
                with open(file_path, 'r') as f:
                    json_data = json.load(f)

                    if json_data is None:
                        continue

                    data = None
                    if target_name is not None:
                        target = target_name
                    else:
                        target = file_name.split(".json")[0]
                    if isinstance(json_data, dict) and 'Results' in json_data:
                        data = json_data['Results'][0]
                    elif isinstance(json_data, list) and "Target" in json_data[0]:
                        data = json_data[0]
                    else:
                        continue

                    if data is not None:
                        for vulnerability in data.get('Vulnerabilities', []):

                            vulnerability_id = vulnerability['VulnerabilityID']
                            if not vulnerability_id.startswith("CVE"):
                                continue

                            if severity_filter is not None:
                                current_severity = vulnerability['Severity']
                                if current_severity is not None:
                                    if self.severity_levels[current_severity] < int(self.severity_levels[severity_filter]):
                                        continue

                            if not grouped_vulnerabilities[vulnerability_id]['Details']:
                                if vulnerability.get('Title') is not None:
                                    title = vulnerability['Title']
                                else:
                                    title = ""

                                if vulnerability.get('Description') is not None:
                                    description = vulnerability['Description']
                                else:
                                    description = ""

                                if vulnerability.get('Severity') is not None:
                                    severity = vulnerability['Severity']
                                else:
                                    severity = ""

                                if vulnerability.get('CweIDs') is not None:
                                    cwe = vulnerability['CweIDs']
                                else:
                                    cwe = ""
                                """
                                if vulnerability.get('VendorSeverity') is not None:
                                    vendor_severity = vulnerability['VendorSeverity']
                                else:
                                    vendor_severity = ""
                                """

                                cvss = vulnerability.get('CVSS', {})
                                media_v2vector, media_v3vector = self.get_cvss_media(cvss.values())
                                grouped_vulnerabilities[vulnerability_id]['Details'] = {
                                    'Title': title,
                                    'Description': description,
                                    'Severity': severity,
                                    'CWE': cwe,
                                    #'VendorSeverity': vendor_severity,
                                    'V2Score': media_v2vector,
                                    'V3Score': media_v3vector,
                                }
                            grouped_vulnerabilities[vulnerability_id]['Targets'].add(target)

        cleaned_grouped_vulnerabilities = {}
        for vulnerability_id, details in grouped_vulnerabilities.items():
            targets = list(details['Targets'])
            vulnerability_details = details['Details']
            cleaned_grouped_vulnerabilities[vulnerability_id] = {
                'Targets': targets,
                'Details': vulnerability_details
            }

        self.vulnerabilities = cleaned_grouped_vulnerabilities
        return cleaned_grouped_vulnerabilities

    def filter_vulnerabilities(self, filter_input):
        if isinstance(filter_input, str):
            with open(filter_input, 'r') as f:
                self.filter_criteria = json.load(f)
        elif isinstance(filter_input, dict):
            self.filter_criteria = filter_input
        else:
            raise ValueError("Invalid filter input format. Must be either a file path or a dictionary.")

        filtered_vulnerabilities = {}
        severity_criteria_list = self.filter_criteria.get('severity')
        vendor_severity_threshold = self.filter_criteria.get('vendorSeverityAverage')
        cvss_v2_score_avg_threshold = self.filter_criteria.get('min_cvss_v2_score_avg')
        cvss_v3_score_avg_threshold = self.filter_criteria.get('min_cvss_v3_score_avg')

        for cve, data in self.vulnerabilities.items():
            targets = data["Targets"]
            details = data["Details"]

            severity = details["Severity"]
            media_vendor_severity = mean(details["VendorSeverity"].values())
            media_v2vector, media_v3vector = self.get_cvss_media(details["CVSS"].values())

            #TODO: Confrontare i valori non solo in and, anche or ecc.

            if severity_criteria_list is not None and len(severity_criteria_list) > 0:
                if severity not in severity_criteria_list:
                    continue

            if vendor_severity_threshold is not None and vendor_severity_threshold >= 0:
                if media_vendor_severity < vendor_severity_threshold:
                    continue

            if cvss_v2_score_avg_threshold is not None and cvss_v2_score_avg_threshold >= 0:
                if media_v2vector < cvss_v2_score_avg_threshold:
                    continue

            if cvss_v3_score_avg_threshold is not None and cvss_v3_score_avg_threshold >= 0:
                if media_v3vector < cvss_v3_score_avg_threshold:
                    continue

            filtered_vulnerabilities[cve] = {
                'Targets': targets,
                'Details': details
            }

        self.filtered_vulnerabilities = filtered_vulnerabilities

        return filtered_vulnerabilities

    @staticmethod
    def get_cvss_media(values):
        v2score = 0
        v2count = 0
        v3score = 0
        v3count = 0
        media_v2vector = ""
        media_v3vector = ""
        for vector_type in values:
            #vector_type_key = list(vector_type.keys())[0]       # V3Vector or V2Vector, not used
            #vector_type_value = list(vector_type.values())[1]   # score, not used
            if "V2Score" in vector_type:
                v2score += vector_type["V2Score"]
                v2count += 1

            if "V3Score" in vector_type:
                v3score += vector_type["V3Score"]
                v3count += 1

        if v2count != 0:
            media_v2vector = round(v2score / v2count, 1)

        if v3count != 0:
            media_v3vector = round(v3score / v3count, 1)

        return media_v2vector, media_v3vector
