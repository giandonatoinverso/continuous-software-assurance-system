import json
import os
from collections import defaultdict


class GrypeVulnerabilityAnalysis:
    def __init__(self, report_path):
        self.report_path = report_path
        self.vulnerabilities = ""
        self.severity_levels = {
            "None": 0,
            "Unknown": 1,
            "Negligible": 2,
            "Low": 3,
            "Medium": 4,
            "High": 5,
            "Critical": 6
        }

    def group_vulnerabilities_by_id(self, severity_filter=None):
        grouped_vulnerabilities = defaultdict(lambda: {'Targets': set(), 'Details': None})
        for file_name in os.listdir(self.report_path):
            if file_name.endswith('.json'):
                file_path = os.path.join(self.report_path, file_name)
                with open(file_path, 'r') as f:
                    json_data = json.load(f)

                    if 'matches' not in json_data and len(json_data["matches"]) > 0:
                        continue

                    target = os.path.splitext(os.path.basename(file_path))[0]

                    for vulnerability in json_data['matches']:

                        vulnerability_id = vulnerability['vulnerability']['id']
                        if vulnerability_id.startswith("GHSA"):
                            continue

                        if severity_filter is not None:
                            current_severity = vulnerability['vulnerability']['severity']
                            if current_severity is not None:
                                if self.severity_levels[current_severity] < int(self.severity_levels[severity_filter]):
                                    continue

                        if not grouped_vulnerabilities[vulnerability_id]['Details']:
                            severity = vulnerability['vulnerability']['severity']

                            if 'description' in vulnerability['vulnerability']:
                                description = vulnerability['vulnerability']['description']
                            else:
                                description = None
                                for related_vuln in vulnerability.get('relatedVulnerabilities', []):
                                    if related_vuln['id'] == vulnerability_id and 'description' in related_vuln:
                                        description = related_vuln['description']
                                        break

                            if 'cvss' in vulnerability['vulnerability']:
                                cvss = vulnerability['vulnerability']['cvss']
                            else:
                                cvss = []
                                for related_vuln in vulnerability.get('relatedVulnerabilities', []):
                                    if related_vuln['id'] == vulnerability_id and 'cvss' in related_vuln:
                                        cvss = related_vuln['cvss']
                                        break

                            v2_metrics = dict()
                            v3_metrics = dict()
                            for cve in cvss:
                                if cve["version"] == "2.0":
                                    v2_metrics["baseScore"] = cve["metrics"]["baseScore"]
                                    v2_metrics["exploitabilityScore"] = cve["metrics"]["exploitabilityScore"]
                                    v2_metrics["impactScore"] = cve["metrics"]["impactScore"]
                                if cve["version"] == "3.1":
                                    v3_metrics["baseScore"] = cve["metrics"]["baseScore"]
                                    v3_metrics["exploitabilityScore"] = cve["metrics"]["exploitabilityScore"]
                                    v3_metrics["impactScore"] = cve["metrics"]["impactScore"]

                            grouped_vulnerabilities[vulnerability_id]['Details'] = {
                                'Description': description,
                                'Severity': severity,
                                'CVSS_V2': v2_metrics,
                                'CVSS_V3': v3_metrics,
                            }
                        grouped_vulnerabilities[vulnerability_id]['Targets'].add(target)

        cleaned_grouped_vulnerabilities = {}
        for vulnerability_id, details in grouped_vulnerabilities.items():
            targets = list(details['Targets'])
            vulnerability_details = details['Details']
            cleaned_grouped_vulnerabilities[vulnerability_id] = {
                'Targets': targets,
                'Details': vulnerability_details
            }

        self.vulnerabilities = cleaned_grouped_vulnerabilities
        return cleaned_grouped_vulnerabilities
